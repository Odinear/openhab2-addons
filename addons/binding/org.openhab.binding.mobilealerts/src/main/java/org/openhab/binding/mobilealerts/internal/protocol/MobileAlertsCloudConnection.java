/**
 * Copyright (c) 2010-2018 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.openhab.binding.mobilealerts.internal.protocol;

import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.client.api.ContentResponse;
import org.eclipse.jetty.client.api.Request;
import org.eclipse.jetty.http.HttpMethod;
import org.eclipse.jetty.util.ssl.SslContextFactory;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author Stefan Mueller - Initial contribution
 *
 */
public class MobileAlertsCloudConnection extends MobileAlertsConnection {

    private static final String URLSS = "https://measurements.mobile-alerts.eu/";
    private static final String PANELCLASS = "panel-body";
    private static final String NAMEPATH = "div.sensor-header a";
    private static final String IDPATH = "div.sensor-header div.sensor-component h4";
    private static final String PROPERTIESPATH = "div.sensor>div.sensor-component";
    private static final String PROPERTYNAME = "h5";
    private static final String PROPERTYDATA = "h4";

    /*
     * private static final String URLV1 = "http://www.data199.com:8080/api/v1/dashboard";
     * private static final String USER_AGENT = "remotemonitor/248 CFNetwork/758.2.8 Darwin/15.0.0";
     * private static final String LANGUAGE = "en-us";
     * private static final String ENCODING = "application/x-www-form-urlencoded";
     * private static final String CHARSET = "utf-8";
     *
     * private static final String DEVICETOKEN = "empty"; // defaults to "empty"
     * private static final String VENDORID = "BE60BB85-EAC9-4C5B-8885-1A54A9D51E29"; // iOS vendor UUID (returned by
     * iOS,
     * // any UUID will do). Launch uuidgen
     * // from the terminal to generate a
     * // fresh one.
     * private static final String PHONEID = "Unknown"; // Phone ID - probably generated by the server based on the
     * // vendorid (this string can be "Unknown" and it still works)
     * private static final String VERSION = "1.21"; // Info.plist CFBundleShortVersionString
     * private static final String BUILD = "248"; // Info.plist CFBundleVersion
     * private static final String EXECUTABLE = "Mobile Alerts"; // Info.plist CFBundleExecutable
     * private static final String BUNDLE = "de.synertronixx.remotemonitor"; // [[NSBundle mainBundle] bundleIdentifier]
     * private static final String LANG = "en"; // preferred language
     */

    private HttpClient httpClient = null;
    private boolean connected = false;
    private String phoneid;

    public MobileAlertsCloudConnection(String phoneid) {
        this.phoneid = phoneid;
    }

    public boolean isConnected() {
        return connected;
    }

    @Override
    public void startCommunication() throws Exception {

        SslContextFactory sslContextFactory = new SslContextFactory();
        httpClient = new HttpClient(sslContextFactory);
        httpClient.start();
    }

    @Override
    public void updateDeviceList() throws Exception {
        String html = sendHttpPostScreenScraping(phoneid);
        Document doc = Jsoup.parse(html);

        Elements deviceElements = doc.getElementsByClass(PANELCLASS);

        devices.clear();

        for (Element device : deviceElements) {
            MobileAlertsDeviceData devdata = new MobileAlertsDeviceData();
            devdata.Name = device.select(NAMEPATH).first().text();
            devdata.Id = device.select(IDPATH).first().text();

            Elements properties = device.select(PROPERTIESPATH);
            for (Element property : properties) {
                String name = property.select(PROPERTYNAME).first().text();
                String data = property.select(PROPERTYDATA).first().text();
                devdata.Properties.put(name, data);
            }
            devices.put(devdata.Id, devdata);
        }

    }

    public String sendHttpPostScreenScraping(String phoneid) {
        Request req = httpClient.newRequest(URLSS);
        req.method(HttpMethod.POST);
        req.param("phoneid", phoneid);

        ContentResponse resp = null;
        try {
            resp = req.send();
        } catch (Exception e) {
            connected = false;
        }
        return resp != null ? resp.getContentAsString() : "";
    }

    /*
     * public String sendHttpPostV1Api(List<String> devices) throws Exception {
     * Request req = httpClient.newRequest(URLV1);
     * req.method(HttpMethod.POST);
     * req.agent(USER_AGENT);
     * req.header(HttpHeader.ACCEPT, ENCODING);
     * req.header(HttpHeader.ACCEPT_CHARSET, CHARSET);
     * req.header(HttpHeader.ACCEPT_LANGUAGE, LANGUAGE);
     * req.param("devicetoken", DEVICETOKEN);
     * req.param("vendorid", VENDORID);
     * req.param("phoneid", PHONEID);
     * req.param("version", VERSION);
     * req.param("build", BUILD);
     * req.param("executable", EXECUTABLE);
     * req.param("bundle", BUNDLE);
     * req.param("lang", LANG);
     * req.param("timezoneoffset", "60"); // local offset to UTC time
     * req.param("timeampm", "true"); // 12h vs 24h clock
     * req.param("usecelsius", "true"); // Celcius vs Fahrenheit
     * req.param("usemm", "true"); // mm vs in
     * req.param("speedunit", "0"); // wind speed (0: m/s, 1: km/h, 2: mph, 3: kn)
     * req.param("timestamp", String.valueOf(System.currentTimeMillis() / 1000));
     * req.param("requesttoken", calculateHash(req));
     * req.param("deviceids", String.join(",", devices));
     *
     * ContentResponse resp = req.send();
     * return resp.getContentAsString();
     *
     * }
     *
     * private String calculateHash(Request req) {
     * String request = req.getQuery();
     * String requestMD5 = request + "asdfaldfjadflxgeteeiorut0ÃŸ8vfdft34503580"; // SALT for the MD5
     * requestMD5 = requestMD5.replace("-", "");
     * requestMD5 = requestMD5.replace(",", "");
     * requestMD5 = requestMD5.replace(".", "");
     * requestMD5 = requestMD5.toLowerCase();
     *
     * return DigestUtils.md5Hex(requestMD5);
     * }
     */

}
